{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joice\\\\ReactJS_Projetos\\\\repositorios\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Container } from \"./styles/styles.js\";\nimport { useState } from \"react\";\nimport gitLogo from \"./img/github.svg\";\nimport Input from \"./components/Input/index.jsx\";\nimport ItemRepo from \"./components/itemRepo/index.js\";\nimport Button from \"./components/Button/index.jsx\";\nimport { api } from \"./services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentRepo, setCurrentRepo] = useState(\"\");\n  const [respos, setRespos] = useState([]);\n\n  //Função que vai buscar o repositório e colocar na tela\n\n  const handleSearchRepo = async () => {\n    // requerimento get e utilizamos o repos que utilizamos no endereço http para direcionar\n    const {\n      data\n    } = await api.get(`repos/${currentRepo}`);\n\n    // se a informação for igual ao id\n    if (data.id) {\n      // Concatena com o setRespo com as informações que já temos\n      setRespos(prev => [...prev, data]);\n      //Depois de encontrado, ao procurar de novo ele irá limpar\n      setCurrentRepo(\"\");\n    }\n    alert(\"Repositório não encontrado!\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gitLogo,\n          width: 72,\n          height: 72\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: currentRepo,\n        onChange: e => setCurrentRepo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSearchRepo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), respos.map(repo => /*#__PURE__*/_jsxDEV(ItemRepo, {\n        repo: repo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"BJJAawBXBvWdfpsreTKuAXuTm0E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Container","useState","gitLogo","Input","ItemRepo","Button","api","App","currentRepo","setCurrentRepo","respos","setRespos","handleSearchRepo","data","get","id","prev","alert","e","target","value","map","repo"],"sources":["C:/Users/joice/ReactJS_Projetos/repositorios/src/App.js"],"sourcesContent":["import { Container } from \"./styles/styles.js\";\r\nimport { useState } from \"react\";\r\nimport gitLogo from \"./img/github.svg\";\r\nimport Input from \"./components/Input/index.jsx\";\r\nimport ItemRepo from \"./components/itemRepo/index.js\";\r\nimport Button from \"./components/Button/index.jsx\";\r\nimport { api } from \"./services/api\";\r\n\r\nconst App = () => {\r\n  const [currentRepo, setCurrentRepo] = useState(\"\");\r\n  const [respos, setRespos] = useState([]);\r\n\r\n  //Função que vai buscar o repositório e colocar na tela\r\n\r\n  const handleSearchRepo = async () => {\r\n    // requerimento get e utilizamos o repos que utilizamos no endereço http para direcionar\r\n    const { data } = await api.get(`repos/${currentRepo}`);\r\n\r\n    // se a informação for igual ao id\r\n    if (data.id) {\r\n      // Concatena com o setRespo com as informações que já temos\r\n      setRespos((prev) => [...prev, data]);\r\n      //Depois de encontrado, ao procurar de novo ele irá limpar\r\n      setCurrentRepo(\"\");\r\n    }\r\n    alert(\"Repositório não encontrado!\");\r\n  };\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div className=\"App\">\r\n          <img src={gitLogo} width={72} height={72} />\r\n        </div>\r\n        <Input\r\n          value={currentRepo}\r\n          onChange={(e) => setCurrentRepo(e.target.value)}\r\n        />\r\n        <Button onClick={handleSearchRepo} />\r\n        {respos.map((repo) => (\r\n          <ItemRepo repo={repo} />\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,KAAK,MAAM,8BAA8B;AAChD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AAAC;AAAA;AAErC,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAExC;;EAEA,MAAMW,gBAAgB,GAAG,YAAY;IACnC;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAE,SAAQN,WAAY,EAAC,CAAC;;IAEtD;IACA,IAAIK,IAAI,CAACE,EAAE,EAAE;MACX;MACAJ,SAAS,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEH,IAAI,CAAC,CAAC;MACpC;MACAJ,cAAc,CAAC,EAAE,CAAC;IACpB;IACAQ,KAAK,CAAC,6BAA6B,CAAC;EACtC,CAAC;EACD,oBACE;IAAA,uBACE,QAAC,SAAS;MAAA,wBACR;QAAK,SAAS,EAAC,KAAK;QAAA,uBAClB;UAAK,GAAG,EAAEf,OAAQ;UAAC,KAAK,EAAE,EAAG;UAAC,MAAM,EAAE;QAAG;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACxC,eACN,QAAC,KAAK;QACJ,KAAK,EAAEM,WAAY;QACnB,QAAQ,EAAGU,CAAC,IAAKT,cAAc,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAChD,eACF,QAAC,MAAM;QAAC,OAAO,EAAER;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAG,EACpCF,MAAM,CAACW,GAAG,CAAEC,IAAI,iBACf,QAAC,QAAQ;QAAC,IAAI,EAAEA;MAAK;QAAA;QAAA;QAAA;MAAA,QACtB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA;EACQ,iBACX;AAEP,CAAC;AAAC,GApCIf,GAAG;AAAA,KAAHA,GAAG;AAsCT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}